picotron cartridge // www.picotron.net
version 2

:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9IkBEb3JrT3JjYSIsYmJzX2lkPSJfZGV2MjY3NSIsY3JlYXRlZD0i
MjAyNS0wOS0xNiAyMDoyMjowNyIsaWNvbj11c2VyZGF0YSgidTgiLDE2LDE2LCIwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAwMDEw
NzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMTA3MTgwNDA4MTkwYTA5MGExYTBhMGIxYzAx
MDcwMTAxMDcwNDA4MTkwYTA5MGExYTBhMGIxYzAzMTAwNzAxMDEwNzA4MTkwYTA5MGExYTBhMGIx
YzAzMGMwMjA3MDEwMTA3MTkwYTA5MGExYTBhMGIxYzAzMGMxMjEzMDcwMTAxMDcwYTA5MGExYTBh
MGIxYzAzMGMxMjEwMDEwNzAxMDEwNzA0MTkwMzE5MTMxMDAxMTAwMjEzMDExNTA3MDEwMTA3MDcw
NzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAxMDcwNzFkMWQxZDFkMWQxZDFkMWQxZDA3MDcwNzAx
MDEwNzA3MWQxZDFkMWQxZDFkMWQxZDFkMDcwNzFkMDEwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcw
NzFkMDEwMDAxMWQxZDFkMWQxZDFkMWQxZDFkMWQxZDFkMDEwMDAwMDAwMTAxMDEwMTAxMDEwMTAx
MDEwMTAxMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIpLG1vZGlmaWVk
PSIyMDI1LTEwLTIzIDE4OjM2OjIxIixub3Rlcz0iQ3JlYXRlIHRyaXBweSBiYWNrZ3JvdW5kcyBh
bmQgc2NyZWVuLVxuc2F2ZXJzIHdpdGggdGhpcyBlYXN5LXRvLXVzZSBnZW5lcmF0b3IhIixydW50
aW1lPTIwLHNhbmRib3g9ZmFsc2UsdGl0bGU9IkdvZ2ggTWFrZXIiLHZlcnNpb249IjEuMC4wIix3
b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVhIzU5LDkwIix3b3Jrc3BhY2VfaW5kZXg9MX0s
e2xvY2F0aW9uPSJzZXR0aW5ncy5sdWEjMTYzLDQ5Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0
aW9uPSJnZW5lcmF0ZS5sdWEjMzE5LDMzIix3b3Jrc3BhY2VfaW5kZXg9MX19XV0=
:: draw-buffer.lua
--[[pod_format="raw",created="2025-09-24 00:58:56",modified="2025-09-24 01:21:32",revision=9]]
drawBuffers = {}

function saveDrawBuffer(_i)
	
end

function loadDrawBuffer(_i)
	
end

function checkDrawBuffer(_i)
	
end
:: generate.lua
--[[pod_format="raw",created="2025-09-25 18:44:02",modified="2025-10-01 23:35:46",revision=418,xstickers={}]]
alphabet =
{
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"k",
	"l",
	"m",
	"n",
	"o",
	"p",
	"q",
	"r",
	"s",
	"t",
	"u",
	"v",
	"w",
	"x",
	"y",
	"z",
}

numbers =
{
	"0",
	"1",
	"2",
	"3",
	"4",
	"5",
	"6",
	"7",
	"8",
	"9",
}

--[[GROUP:Utility]]
function stageData()
	_data = 
	{
		-- Count options
		settings.countOptions.choices[1].value,
		settings.countOptions.choices[2].value,
		-- Color options
		settings.colorOptions.choices[1].value,
		settings.colorOptions.choices[2].value,
		settings.colorOptions.choices[3].value,
		settings.colorOptions.choices[4].value,
		settings.colorOptions.choices[5].value,
		-- Oscillation options
		settings.oscillationOptions.choices[1].value,
		settings.oscillationOptions.choices[2].value,
		settings.oscillationOptions.choices[3].value,
		settings.oscillationOptions.choices[4].value,
		-- Size options
		settings.sizeOptions.choices[1].value,
		settings.sizeOptions.choices[2].value,
		settings.sizeOptions.choices[3].value,
		settings.sizeOptions.choices[4].value,
		settings.sizeOptions.choices[5].value,
		settings.sizeOptions.choices[6].value,
		-- Custom colors
		settings.customColors.choices[1].value,
		settings.customColors.choices[2].value,
		settings.customColors.choices[3].value,
		settings.customColors.choices[4].value,
		settings.customColors.choices[5].value,
		-- General options
		settings.generalOptions.choices[2].value,
	}
	
	_data[0] = "gogh"
	
	return _data
end

function saveSetup()
	fileName = 
	{
		done = false,
		text = "",
	}

	saveData = stageData()
	
	saved = false
	yPromptOffset = 11

	print("step1",7)
	generateStep += 1
end

function makeDirectory(_name)
	_storageExists = ls(_name)
	
	if not _storageExists then
		mkdir(_name)
	end

	generateStep += 1
end

function textInput()
	if fileName.done == false then
		for k, v in pairs(getKeyPressed()) do
			if v then
				if k == "backspace" then
					fileName.text = sub(fileName.text, 1, #fileName.text - 1)
				elseif k == "space" then
					if fileName.text == "" then
						fileName.text = tostring(date("%Y_%m_%d_%H_%M_%S"))
					end
					
					fileName.done = true
				else
					if #k == 1 and k:match("[a-z0-9]") and #fileName.text < 20 then
						fileName.text = fileName.text .. k
					end
				end
			end
		end
		
		_blink = flr(t()) % 2 == 0 and "_" or ""
		
		if yPromptOffset > 0 then
			yPromptOffset -= 1
		end	

		rectfill(0, 259 + yPromptOffset, 480, 270, 6)
		print("File name (space to save): " .. fileName.text .. _blink, 5, 261 + yPromptOffset, 1)
	else
		yPromptOffset = 11
		generateStep += 1
	end
end

function getKeyPressed()
	_keysPressed = {}
	
	for i = 1, #alphabet do
		_keysPressed[alphabet[i]] = keyp(alphabet[i])	
	end	
	
	for i = 1, #numbers do
		_keysPressed[numbers[i]] = keyp(numbers[i])
	end
	
	_keysPressed.backspace = keyp("backspace")
	
	_keysPressed.space = keyp("space")
	
	return _keysPressed
end

function finalizeSave(_format)
	_formats =
	{
		"/appdata/gogh/" .. fileName.text .. ".pod",
		"gogh.p64/theme.pod",
		"gogh.p64/theme.pod",
		"gogh.p64 / theme.pod",
	}
	
	if saved == false then
		store(_formats[_format], saveData)
		
		if _format > 1 then
			saveCart(_format - 1)
		else
			validated = true
		end
		
		saved = true
	end
	
	if yPromptOffset > 0 then
		yPromptOffset -= 1
	end	

	rectfill(0, 259 + yPromptOffset, 480, 270, 6)
	
	if validated == true then
		_message =
			_format == 1 and "File saved to appdata folder as " .. fileName.text .. ".pod. Press any key to continue..." or
			_format == 2 and "File saved to wallpapers folder as " .. fileName.text .. ".p64. Press any key to continue..." or
			_format == 3 and "File saved to screensavers folder as " .. fileName.text .. ".p64. Press any key to continue..." or
			_format == 4 and "File saved to appdata folder as " .. fileName.text .. ".p64. Press any key to continue..."
	else
		_message =
			_format == 1 and "File could not be saved to appdata folder. Disable sandbox if possible." or
			_format == 2 and "File could not be saved to wallpapers folder. Disable sandbox if possible." or
			_format == 3 and "File could not be saved to screensavers folder. Disable sandbox if possible." or
			_format == 4 and "File could not be saved to appdata folder. Disable sandbox if possible." or
			"An unknown error has occurred!"
	end
	
	print(_message, 5, 261 + yPromptOffset, 1)
	
	if keyp() then
		generating = false
	end
end

function saveCart(_path)
	_paths =
	{
		"/appdata/system/wallpapers/" .. fileName.text .. ".p64",
		"/appdata/system/screensavers/" .. fileName.text .. ".p64",
		"/appdata/gogh/" .. fileName.text .. ".p64",
	}
	
	_cart = "gogh.p64"

	cp(_cart, _paths[_path])
	
	_validate = fetch(_paths[_path])
	
	if _validate then
		validated = true
	else
		validated = false
	end
end

function loadSetup()
	cd("/appdata/gogh")
	loaded = false
	currentFile = 0
	startDirectory = pwd()
	generateStep += 1
end

function fetchFile()
	_fetched = false
	
	storage = ls(pwd())
	storage[0] = ".."	

	_xStart = 480 / 4
	_yStart = 270 / 3
	_width = _xStart * 2
	_height = _yStart

	rrectfill(_xStart, _yStart, _width, _height, 8, 1)
	rrect(_xStart, _yStart, _width, _height, 8, 7)

	clip(_xStart + 3, _yStart + 3, _width - 4, _height - 6)

	for _i = currentFile - 3, currentFile + 3 do
		if _i >= 0 and _i < #storage + 1 then
			_textX = _xStart + _width / 2 - #storage[_i] * 2
			_textY = (_yStart + _height / 2) + 19 * (_i - currentFile) - 4
			
			_selected = _i == currentFile
			_boxColor = _selected and 28 or 16	
			_textColor = _selected and 1 or 7
			
			rrectfill(_xStart + 4, _textY - 4, _width - 8, 16, 3, _boxColor)
			print(storage[_i], _textX, _textY, _textColor)
		end
	end
	
	clip()

	print(pwd(), _xStart + 10, _yStart + 4, 12)
	
	if btnp(3) then
		currentFile = currentFile < #storage and currentFile + 1 or currentFile
	elseif btnp(2) then
		currentFile = currentFile > 0 and currentFile - 1 or currentFile
	elseif btnp(4) then
		if storage[currentFile] == ".." then
			cd("..")
		elseif storage[currentFile]:match("%.") != "." then
			cd(storage[currentFile])
			currentFile = 0
		elseif storage[currentFile]:match("%.pod") == ".pod" then
			fetchResult = fetch(storage[currentFile])
			checkFetch(fetchResult)
		elseif storage[currentFile]:match("%.p64") then
			fetchResult = fetch(storage[currentFile] .. "/theme.pod")
			checkFetch(fetchResult)
		else
			loadError = true
			yPromptOffset = 11
			errorTimer = 120
		end
	elseif btnp(5) then
		generating = false
	end

	if _fetched == true then
		yPromptOffset = 11
		generateStep += 1
	end
end

function checkFetch(_fetch)

	_fetched = _fetch[0] == "gogh" and true or false
		
	if _fetched == false then
		loadError = true
		yPromptOffset = 11
		errorTimer = 120
	end
end

function stageLoad(_menuName, _i, _j)
	for _x = _i, _j do
		settings[_menuName].choices[_x].value = fetchResult[fetchCounter]
		fetchCounter += 1
	end
end

function finalizeLoad()
	fetchCounter = 1
	
	if loaded == false then
		stageLoad("countOptions", 1, 2)
		stageLoad("colorOptions", 1, 5)
		stageLoad("oscillationOptions", 1, 4)
		stageLoad("sizeOptions", 1, 6)
		stageLoad("customColors", 1, 5)
		stageLoad("generalOptions", 2, 2)
		
		setOptions()	
		loaded = true
	end
	
	if yPromptOffset > 0 then
		yPromptOffset -= 1
	end	

	rectfill(0, 259 + yPromptOffset, 480, 270, 6)
	print("Loaded config file " .. storage[currentFile] .. ". Press any key to continue...", 5, 261 + yPromptOffset, 1)
	
	if keyp() then
		generating = false
	end
end


--[[GROUP:Errors]]
function genLoadError()
	rectfill(0, 259 + yPromptOffset, 480, 270, 6)
	print("ERROR: Not a valid config file", 5, 261 + yPromptOffset, 8)
	
	if errorTimer > 0 then
		errorTimer -= 1
		
		if yPromptOffset > 0 then
			yPromptOffset -= 1
		end
	else
		if yPromptOffset < 11 then
			yPromptOffset += 1
		else
			loadError = false
		end
	end
end

function genNullError()
	rectfill(0, 259 + yPromptOffset, 480, 270, 6)
	print("Coming soon!", 5, 261 + yPromptOffset, 12)
	
	if errorTimer > 0 then
		errorTimer -= 1
		
		if yPromptOffset > 0 then
			yPromptOffset -= 1
		end
	else
		if yPromptOffset < 11 then
			yPromptOffset += 1
		else
			promptError = false
			generating = false
		end
	end
end

--[[GROUP:Loops]]
function saveConfig()
	_g_tbl =
	{
		saveSetup,
		makeDirectory,
		textInput,
		finalizeSave,
	}
	
	_v_tbl =
	{
		nil,
		"/appdata/gogh",
		nil,
		1,
	}
	
	_func = _g_tbl[generateStep]
	_var = _v_tbl[generateStep]
		
	if _func then
		if _var then
			_func(_var)
		else
			_func()
		end
	else
		generating = false
	end
end

function loadConfig()
	_g_tbl =
	{
		makeDirectory,
		loadSetup,
		fetchFile,
		finalizeLoad,
	}
	
	_v_tbl =
	{
		"/appdata/gogh",
		nil,
		nil,
		nil,
	}
	
	_func = _g_tbl[generateStep]
	_var = _v_tbl[generateStep]
		
	if _func then
		if _var then
			_func(_var)
		else
			_func()
		end
	else
		generating = false
	end
	
	if loadError == true then
		genLoadError()
	end
end

function saveBackground()
	_g_tbl =
	{
		makeDirectory,
		saveSetup,
		textInput,
		finalizeSave,
	}
		
	_v_tbl =
	{
		"/appdata/system/wallpapers",
		nil,
		nil,
		2,
	}
	
	_func = _g_tbl[generateStep]
	_var = _v_tbl[generateStep]
		
	if _func then
		if _var then
			_func(_var)
		else
			_func()
		end
	else
		generating = false
	end
end

function saveScreensaver()
	_g_tbl =
	{
		makeDirectory,
		saveSetup,
		textInput,
		finalizeSave,
	}
		
	_v_tbl =
	{
		"/appdata/system/screensavers",
		nil,
		nil,
		3,
	}
	
	_func = _g_tbl[generateStep]
	_var = _v_tbl[generateStep]
		
	if _func then
		if _var then
			_func(_var)
		else
			_func()
		end
	else
		generating = false
	end
end

function saveApp()
	_g_tbl =
	{
		makeDirectory,
		saveSetup,
		textInput,
		finalizeSave,
	}
	
	_v_tbl =
	{
		"/appdata/gogh/",
		nil,
		nil,
		4,
	}
	
	_func = _g_tbl[generateStep]
	_var = _v_tbl[generateStep]
		
	if _func then
		if _var then
			_func(_var)
		else
			_func()
		end
	else
		generating = false
	end
end
:: gfx/
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA5LTIyIDIyOjQ2OjI1Iixtb2RpZmllZD0iMjAyNS0x
MC0yMyAxODozNjoyMSJdXQ==
:: gfx/0.lua
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA5LTIzIDE4OjI2OjE0Iixtb2RpZmllZD0iMjAyNS0w
OS0yNSAyMjoyNzo1MyIscmV2aXNpb249MzFdXWx6NAB_AAAAEjEAAPMhe1swXT17Ym1wPXB4dQBD
IBAQBPBWBxAHwBfQF8AHEAfwVixmbGFncz0wLHBhbl94CADLeT0wLHpvb209OH0sPgAf8DEA----
------------------------------------------------------------11BtPTh9fQ==
:: gogh.p64
b64$cGljb3Ryb24gY2FydHJpZGdlIC8vIHd3dy5waWNvdHJvbi5uZXQKdmVyc2lvbiAyCgo6OiAu
aW5mby5wb2QKYjY0JExTMWJXM0J2WkN4aVluTmZhV1E5SWw5a1pYWXlOamMxSWl4amNtVmhkR1Zr
UFNJeU1ESTFMVEE1TFRFMklESXdPakl5T2pBMwpJaXhwWTI5dVBYVnpaWEprWVhSaEtDSjFPQ0lz
TVRZc01UWXNJakF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3Ck1EQXdNREF3
TVRBeE1ERXdNVEF4TURFd01UQXhNREV3TVRBeE1ERXdNVEF4TURBd01UQTNNRGN3TnpBM01EY3dO
ekEzTURjd056QTMKTURjd056QTNNRGN3TVRBeE1EY3hPREEwTURneE9UQmhNRGt3WVRGaE1HRXdZ
akZqTURFd056QXhNREV3TnpBME1EZ3hPVEJoTURrdwpZVEZoTUdFd1lqRmpNRE14TURBM01ERXdN
VEEzTURneE9UQmhNRGt3WVRGaE1HRXdZakZqTURNd1l6QXlNRGN3TVRBeE1EY3hPVEJoCk1Ea3dZ
VEZoTUdFd1lqRmpNRE13WXpFeU1UTXdOekF4TURFd056QmhNRGt3WVRGaE1HRXdZakZqTURNd1l6
RXlNVEF3TVRBM01ERXcKTVRBM01EUXhPVEF6TVRreE16RXdNREV4TURBeU1UTXdNVEUxTURjd01U
QXhNRGN3TnpBM01EY3dOekEzTURjd056QTNNRGN3TnpBMwpNRGN3TnpBeE1ERXdOekEzTVdReFpE
RmtNV1F4WkRGa01XUXhaREZrTURjd056QTNNREV3TVRBM01EY3haREZrTVdReFpERmtNV1F4ClpE
RmtNV1F3TnpBM01XUXdNVEF4TURjd056QTNNRGN3TnpBM01EY3dOekEzTURjd056QTNNV1F3TVRB
d01ERXhaREZrTVdReFpERmsKTVdReFpERmtNV1F4WkRGa01XUXdNVEF3TURBd01EQXhNREV3TVRB
eE1ERXdNVEF4TURFd01UQXhNREV3TVRBd01EQXdNREF3TURBdwpNREF3TURBd01EQXdNREF3TURB
d01EQXdNREF3TURBd01EQXdJaWtzYlc5a2FXWnBaV1E5SWpJd01qVXRNVEF0TWpNZ01UZzZNelk2
Ck1qRWlMSEoxYm5ScGJXVTlNakFzYzJGdVpHSnZlRDFtWVd4elpTeDNiM0pyYzNCaFkyVnpQWHQ3
Ykc5allYUnBiMjQ5SW0xaGFXNHUKYkhWaEl6VXlMRE0ySWl4M2IzSnJjM0JoWTJWZmFXNWtaWGc5
TVgwc2UyeHZZMkYwYVc5dVBTSnpaWFIwYVc1bmN5NXNkV0VqTVRNMApMRElpTEhkdmNtdHpjR0Zq
WlY5cGJtUmxlRDB4ZlgxZFhRPT0KOjogZHJhdy1idWZmZXIubHVhCi0tW1twb2RfZm9ybWF0PSJy
YXciLGNyZWF0ZWQ9IjIwMjUtMDktMjQgMDA6NTg6NTYiLG1vZGlmaWVkPSIyMDI1LTA5LTI0IDAx
OjIxOjMyIixyZXZpc2lvbj05XV0KZHJhd0J1ZmZlcnMgPSB7fQoKZnVuY3Rpb24gc2F2ZURyYXdC
dWZmZXIoX2kpCgkKZW5kCgpmdW5jdGlvbiBsb2FkRHJhd0J1ZmZlcihfaSkKCQplbmQKCmZ1bmN0
aW9uIGNoZWNrRHJhd0J1ZmZlcihfaSkKCQplbmQKOjogZ2VuZXJhdGUubHVhCi0tW1twb2RfZm9y
bWF0PSJyYXciLGNyZWF0ZWQ9IjIwMjUtMDktMjUgMTg6NDQ6MDIiLG1vZGlmaWVkPSIyMDI1LTA5
LTI2IDIyOjEwOjAwIixyZXZpc2lvbj0zMjcseHN0aWNrZXJzPXt9XV0KYWxwaGFiZXQgPQp7Cgki
YSIsCgkiYiIsCgkiYyIsCgkiZCIsCgkiZSIsCgkiZiIsCgkiZyIsCgkiaCIsCgkiaSIsCgkiaiIs
CgkiayIsCgkibCIsCgkibSIsCgkibiIsCgkibyIsCgkicCIsCgkicSIsCgkiciIsCgkicyIsCgki
dCIsCgkidSIsCgkidiIsCgkidyIsCgkieCIsCgkieSIsCgkieiIsCn0KCm51bWJlcnMgPQp7Cgki
MCIsCgkiMSIsCgkiMiIsCgkiMyIsCgkiNCIsCgkiNSIsCgkiNiIsCgkiNyIsCgkiOCIsCgkiOSIs
Cn0KCi0tW1tHUk9VUDpVdGlsaXR5XV0KZnVuY3Rpb24gc3RhZ2VEYXRhKCkKCV9kYXRhID0gCgl7
CgkJLS0gQ291bnQgb3B0aW9ucwoJCXNldHRpbmdzLmNvdW50T3B0aW9ucy5jaG9pY2VzWzFdLnZh
bHVlLAoJCXNldHRpbmdzLmNvdW50T3B0aW9ucy5jaG9pY2VzWzJdLnZhbHVlLAoJCS0tIENvbG9y
IG9wdGlvbnMKCQlzZXR0aW5ncy5jb2xvck9wdGlvbnMuY2hvaWNlc1sxXS52YWx1ZSwKCQlzZXR0
aW5ncy5jb2xvck9wdGlvbnMuY2hvaWNlc1syXS52YWx1ZSwKCQktLSBPc2NpbGxhdGlvbiBvcHRp
b25zCgkJc2V0dGluZ3Mub3NjaWxsYXRpb25PcHRpb25zLmNob2ljZXNbMV0udmFsdWUsCgkJc2V0
dGluZ3Mub3NjaWxsYXRpb25PcHRpb25zLmNob2ljZXNbMl0udmFsdWUsCgkJc2V0dGluZ3Mub3Nj
aWxsYXRpb25PcHRpb25zLmNob2ljZXNbM10udmFsdWUsCgkJc2V0dGluZ3Mub3NjaWxsYXRpb25P
cHRpb25zLmNob2ljZXNbNF0udmFsdWUsCgkJLS0gU2l6ZSBvcHRpb25zCgkJc2V0dGluZ3Muc2l6
ZU9wdGlvbnMuY2hvaWNlc1sxXS52YWx1ZSwKCQlzZXR0aW5ncy5zaXplT3B0aW9ucy5jaG9pY2Vz
WzJdLnZhbHVlLAoJCXNldHRpbmdzLnNpemVPcHRpb25zLmNob2ljZXNbM10udmFsdWUsCgkJc2V0
dGluZ3Muc2l6ZU9wdGlvbnMuY2hvaWNlc1s0XS52YWx1ZSwKCQlzZXR0aW5ncy5zaXplT3B0aW9u
cy5jaG9pY2VzWzVdLnZhbHVlLAoJCXNldHRpbmdzLnNpemVPcHRpb25zLmNob2ljZXNbNl0udmFs
dWUsCgkJLS0gQ3VzdG9tIGNvbG9ycwoJCXNldHRpbmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzRd
LnZhbHVlLAoJCXNldHRpbmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzNdLnZhbHVlLAoJCXNldHRp
bmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzJdLnZhbHVlLAoJCXNldHRpbmdzLmN1c3RvbUNvbG9y
cy5jaG9pY2VzWzFdLnZhbHVlLAoJCXNldHRpbmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzVdLnZh
bHVlLAoJCS0tIEdlbmVyYWwgb3B0aW9ucwoJCXNldHRpbmdzLmdlbmVyYWxPcHRpb25zLmNob2lj
ZXNbMl0udmFsdWUsCgl9CgkKCV9kYXRhWzBdID0gImdvZ2giCgkKCXJldHVybiBfZGF0YQplbmQK
CmZ1bmN0aW9uIHNhdmVTZXR1cCgpCglmaWxlTmFtZSA9IAoJewoJCWRvbmUgPSBmYWxzZSwKCQl0
ZXh0ID0gIiIsCgl9CgoJc2F2ZURhdGEgPSBzdGFnZURhdGEoKQoJCglzYXZlZCA9IGZhbHNlCgl5
UHJvbXB0T2Zmc2V0ID0gMTEKCglwcmludCgic3RlcDEiLDcpCglnZW5lcmF0ZVN0ZXAgKz0gMQpl
bmQKCmZ1bmN0aW9uIG1ha2VEaXJlY3RvcnkoKQoJX3N0b3JhZ2VFeGlzdHMgPSBscygiL2FwcGRh
dGEvZ29naCIpCgkKCWlmIG5vdCBfc3RvcmFnZUV4aXN0cyB0aGVuCgkJbWtkaXIoIi9hcHBkYXRh
L2dvZ2giKQoJZW5kCgoJZ2VuZXJhdGVTdGVwICs9IDEKZW5kCgpmdW5jdGlvbiB0ZXh0SW5wdXQo
KQoJaWYgZmlsZU5hbWUuZG9uZSA9PSBmYWxzZSB0aGVuCgkJZm9yIGssIHYgaW4gcGFpcnMoZ2V0
S2V5UHJlc3NlZCgpKSBkbwoJCQlpZiB2IHRoZW4KCQkJCWlmIGsgPT0gImJhY2tzcGFjZSIgdGhl
bgoJCQkJCWZpbGVOYW1lLnRleHQgPSBzdWIoZmlsZU5hbWUudGV4dCwgMSwgI2ZpbGVOYW1lLnRl
eHQgLSAxKQoJCQkJZWxzZWlmIGsgPT0gInNwYWNlIiB0aGVuCgkJCQkJaWYgZmlsZU5hbWUudGV4
dCA9PSAiIiB0aGVuCgkJCQkJCWZpbGVOYW1lLnRleHQgPSB0b3N0cmluZyhkYXRlKCIlWV8lbV8l
ZF8lSF8lTV8lUyIpKQoJCQkJCWVuZAoJCQkJCQoJCQkJCWZpbGVOYW1lLmRvbmUgPSB0cnVlCgkJ
CQllbHNlCgkJCQkJaWYgI2sgPT0gMSBhbmQgazptYXRjaCgiW2EtejAtOV0iKSBhbmQgI2ZpbGVO
YW1lLnRleHQgPCAyMCB0aGVuCgkJCQkJCWZpbGVOYW1lLnRleHQgPSBmaWxlTmFtZS50ZXh0IC4u
IGsKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQKCQkKCQlfYmxpbmsgPSBmbHIodCgpIC8g
MTAwKSAlIDIgPT0gMCBhbmQgIl8iIG9yICIiCgkJCgkJaWYgeVByb21wdE9mZnNldCA_IDAgdGhl
bgoJCQl5UHJvbXB0T2Zmc2V0IC09IDEKCQllbmQJCgoJCXJlY3RmaWxsKDAsIDI1OSArIHlQcm9t
cHRPZmZzZXQsIDQ4MCwgMjcwLCA2KQoJCXByaW50KCJGaWxlIG5hbWUgKHNwYWNlIHRvIHNhdmUp
OiAiIC4uIGZpbGVOYW1lLnRleHQgLi4gX2JsaW5rLCA1LCAyNjEgKyB5UHJvbXB0T2Zmc2V0LCAx
KQoJZWxzZQoJCXlQcm9tcHRPZmZzZXQgPSAxMQoJCWdlbmVyYXRlU3RlcCArPSAxCgllbmQKZW5k
CgpmdW5jdGlvbiBnZXRLZXlQcmVzc2VkKCkKCV9rZXlzUHJlc3NlZCA9IHt9CgkKCWZvciBpID0g
MSwgI2FscGhhYmV0IGRvCgkJX2tleXNQcmVzc2VkW2FscGhhYmV0W2ldXSA9IGtleXAoYWxwaGFi
ZXRbaV0pCQoJZW5kCQoJCglmb3IgaSA9IDEsICNudW1iZXJzIGRvCgkJX2tleXNQcmVzc2VkW251
bWJlcnNbaV1dID0ga2V5cChudW1iZXJzW2ldKQoJZW5kCgkKCV9rZXlzUHJlc3NlZC5iYWNrc3Bh
Y2UgPSBrZXlwKCJiYWNrc3BhY2UiKQoJCglfa2V5c1ByZXNzZWQuc3BhY2UgPSBrZXlwKCJzcGFj
ZSIpCgkKCXJldHVybiBfa2V5c1ByZXNzZWQKZW5kCgpmdW5jdGlvbiBmaW5hbGl6ZVNhdmUoKQoJ
aWYgc2F2ZWQgPT0gZmFsc2UgdGhlbgoJCXN0b3JlKCIvYXBwZGF0YS9nb2doLyIgLi4gZmlsZU5h
bWUudGV4dCAuLiAiLnBvZCIsIHNhdmVEYXRhKQoJCXNhdmVkID0gdHJ1ZQoJZW5kCgkKCWlmIHlQ
cm9tcHRPZmZzZXQgPiAwIHRoZW4KCQl5UHJvbXB0T2Zmc2V0IC09IDEKCWVuZAkKCglyZWN0Zmls
bCgwLCAyNTkgKyB5UHJvbXB0T2Zmc2V0LCA0ODAsIDI3MCwgNikKCXByaW50KCJGaWxlIHNhdmVk
IHRvIGFwcGRhdGEgZm9sZGVyIGFzICIgLi4gZmlsZU5hbWUudGV4dCAuLiAiLnBvZC4gUHJlc3Mg
YW55IGtleSB0byBjb250aW51ZS4uLiIsIDUsIDI2MSArIHlQcm9tcHRPZmZzZXQsIDEpCgkKCWlm
IGtleXAoKSB0aGVuCgkJZ2VuZXJhdGluZyA9IGZhbHNlCgllbmQKZW5kCgpmdW5jdGlvbiBsb2Fk
U2V0dXAoKQoJY2QoIi9hcHBkYXRhL2dvZ2giKQoJbG9hZGVkID0gZmFsc2UKCWN1cnJlbnRGaWxl
ID0gMAoJc3RhcnREaXJlY3RvcnkgPSBwd2QoKQoJZ2VuZXJhdGVTdGVwICs9IDEKZW5kCgpmdW5j
dGlvbiBmZXRjaEZpbGUoKQoJX2ZldGNoZWQgPSBmYWxzZQoJCglzdG9yYWdlID0gbHMocHdkKCkp
CglzdG9yYWdlWzBdID0gIi4uIgkKCglfeFN0YXJ0ID0gNDgwIC8gNAoJX3lTdGFydCA9IDI3MCAv
IDMKCV93aWR0aCA9IF94U3RhcnQgKiAyCglfaGVpZ2h0ID0gX3lTdGFydAoKCXJyZWN0ZmlsbChf
eFN0YXJ0LCBfeVN0YXJ0LCBfd2lkdGgsIF9oZWlnaHQsIDgsIDEpCglycmVjdChfeFN0YXJ0LCBf
eVN0YXJ0LCBfd2lkdGgsIF9oZWlnaHQsIDgsIDcpCgoJY2xpcChfeFN0YXJ0ICsgMywgX3lTdGFy
dCArIDMsIF93aWR0aCAtIDQsIF9oZWlnaHQgLSA2KQoKCWZvciBfaSA9IGN1cnJlbnRGaWxlIC0g
MywgY3VycmVudEZpbGUgKyAzIGRvCgkJaWYgX2kgPj0gMCBhbmQgX2kgPCAjc3RvcmFnZSArIDEg
dGhlbgoJCQlfdGV4dFggPSBfeFN0YXJ0ICsgX3dpZHRoIC8gMiAtICNzdG9yYWdlW19pXSAqIDIK
CQkJX3RleHRZID0gKF95U3RhcnQgKyBfaGVpZ2h0IC8gMikgKyAxOSAqIChfaSAtIGN1cnJlbnRG
aWxlKSAtIDQKCQkJCgkJCV9zZWxlY3RlZCA9IF9pID09IGN1cnJlbnRGaWxlCgkJCV9ib3hDb2xv
ciA9IF9zZWxlY3RlZCBhbmQgMjggb3IgMTYJCgkJCV90ZXh0Q29sb3IgPSBfc2VsZWN0ZWQgYW5k
IDEgb3IgNwoJCQkKCQkJcnJlY3RmaWxsKF94U3RhcnQgKyA0LCBfdGV4dFkgLSA0LCBfd2lkdGgg
LSA4LCAxNiwgMywgX2JveENvbG9yKQoJCQlwcmludChzdG9yYWdlW19pXSwgX3RleHRYLCBfdGV4
dFksIF90ZXh0Q29sb3IpCgkJZW5kCgllbmQKCQoJY2xpcCgpCgoJcHJpbnQocHdkKCksIF94U3Rh
cnQgKyAxMCwgX3lTdGFydCArIDQsIDEyKQoJCglpZiBidG5wKDMpIHRoZW4KCQljdXJyZW50Rmls
ZSA9IGN1cnJlbnRGaWxlIDwgI3N0b3JhZ2UgYW5kIGN1cnJlbnRGaWxlICsgMSBvciBjdXJyZW50
RmlsZQoJZWxzZWlmIGJ0bnAoMikgdGhlbgoJCWN1cnJlbnRGaWxlID0gY3VycmVudEZpbGUgPiAw
IGFuZCBjdXJyZW50RmlsZSAtIDEgb3IgY3VycmVudEZpbGUKCWVsc2VpZiBidG5wKDQpIHRoZW4K
CQlpZiBzdG9yYWdlW2N1cnJlbnRGaWxlXSA9PSAiLi4iIHRoZW4KCQkJY2QoIi4uIikKCQllbHNl
aWYgc3RvcmFnZVtjdXJyZW50RmlsZV06bWF0Y2goIi5wb2QiKSA9PSAiLnBvZCIgdGhlbgoJCQlm
ZXRjaFJlc3VsdCA9IGZldGNoKHN0b3JhZ2VbY3VycmVudEZpbGVdKQoJCQlfZmV0Y2hlZCA9IGZl
dGNoUmVzdWx0WzBdID09ICJnb2doIiBhbmQgdHJ1ZSBvciBmYWxzZQoJCQkKCQkJaWYgX2ZldGNo
ZWQgPT0gZmFsc2UgdGhlbgoJCQkJbG9hZEVycm9yID0gdHJ1ZQoJCQkJeVByb21wdE9mZnNldCA9
IDExCgkJCQllcnJvclRpbWVyID0gMTIwCgkJCWVuZAoJCWVsc2VpZiBzdG9yYWdlW2N1cnJlbnRG
aWxlXTptYXRjaCgiJS4iKSAhPSAiLiIgdGhlbgoJCQljZChzdG9yYWdlW2N1cnJlbnRGaWxlXSkK
CQkJY3VycmVudEZpbGUgPSAwCgkJZWxzZQoJCQlsb2FkRXJyb3IgPSB0cnVlCgkJCXlQcm9tcHRP
ZmZzZXQgPSAxMQoJCQllcnJvclRpbWVyID0gMTIwCgkJZW5kCgllbHNlaWYgYnRucCg1KSB0aGVu
CgkJZ2VuZXJhdGluZyA9IGZhbHNlCgllbmQKCglpZiBfZmV0Y2hlZCA9PSB0cnVlIHRoZW4KCQl5
UHJvbXB0T2Zmc2V0ID0gMTEKCQlnZW5lcmF0ZVN0ZXAgKz0gMQoJZW5kCmVuZAoKZnVuY3Rpb24g
ZmluYWxpemVMb2FkKCkKCWlmIGxvYWRlZCA9PSBmYWxzZSB0aGVuCgkJLS0gQ291bnQgb3B0aW9u
cwoJCXNldHRpbmdzLmNvdW50T3B0aW9ucy5jaG9pY2VzWzFdLnZhbHVlID0gZmV0Y2hSZXN1bHRb
MV0KCQlzZXR0aW5ncy5jb3VudE9wdGlvbnMuY2hvaWNlc1syXS52YWx1ZSA9IGZldGNoUmVzdWx0
WzJdCgkJLS0gQ29sb3Igb3B0aW9ucwoJCXNldHRpbmdzLmNvbG9yT3B0aW9ucy5jaG9pY2VzWzFd
LnZhbHVlID0gZmV0Y2hSZXN1bHRbM10KCQlzZXR0aW5ncy5jb2xvck9wdGlvbnMuY2hvaWNlc1sy
XS52YWx1ZSA9IGZldGNoUmVzdWx0WzRdCgkJLS0gT3NjaWxsYXRpb24gb3B0aW9ucwoJCXNldHRp
bmdzLm9zY2lsbGF0aW9uT3B0aW9ucy5jaG9pY2VzWzFdLnZhbHVlID0gZmV0Y2hSZXN1bHRbNV0K
CQlzZXR0aW5ncy5vc2NpbGxhdGlvbk9wdGlvbnMuY2hvaWNlc1syXS52YWx1ZSA9IGZldGNoUmVz
dWx0WzZdCgkJc2V0dGluZ3Mub3NjaWxsYXRpb25PcHRpb25zLmNob2ljZXNbM10udmFsdWUgPSBm
ZXRjaFJlc3VsdFs3XQoJCXNldHRpbmdzLm9zY2lsbGF0aW9uT3B0aW9ucy5jaG9pY2VzWzRdLnZh
bHVlID0gZmV0Y2hSZXN1bHRbOF0KCQktLSBTaXplIG9wdGlvbnMKCQlzZXR0aW5ncy5zaXplT3B0
aW9ucy5jaG9pY2VzWzFdLnZhbHVlID0gZmV0Y2hSZXN1bHRbOV0KCQlzZXR0aW5ncy5zaXplT3B0
aW9ucy5jaG9pY2VzWzJdLnZhbHVlID0gZmV0Y2hSZXN1bHRbMTBdCgkJc2V0dGluZ3Muc2l6ZU9w
dGlvbnMuY2hvaWNlc1szXS52YWx1ZSA9IGZldGNoUmVzdWx0WzExXQoJCXNldHRpbmdzLnNpemVP
cHRpb25zLmNob2ljZXNbNF0udmFsdWUgPSBmZXRjaFJlc3VsdFsxMl0KCQlzZXR0aW5ncy5zaXpl
T3B0aW9ucy5jaG9pY2VzWzVdLnZhbHVlID0gZmV0Y2hSZXN1bHRbMTNdCgkJc2V0dGluZ3Muc2l6
ZU9wdGlvbnMuY2hvaWNlc1s2XS52YWx1ZSA9IGZldGNoUmVzdWx0WzE0XQoJCS0tIEN1c3RvbSBj
b2xvcnMKCQlzZXR0aW5ncy5jdXN0b21Db2xvcnMuY2hvaWNlc1s0XS52YWx1ZSA9IGZldGNoUmVz
dWx0WzE1XQoJCXNldHRpbmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzNdLnZhbHVlID0gZmV0Y2hS
ZXN1bHRbMTZdCgkJc2V0dGluZ3MuY3VzdG9tQ29sb3JzLmNob2ljZXNbMl0udmFsdWUgPSBmZXRj
aFJlc3VsdFsxN10KCQlzZXR0aW5ncy5jdXN0b21Db2xvcnMuY2hvaWNlc1sxXS52YWx1ZSA9IGZl
dGNoUmVzdWx0WzE4XQoJCXNldHRpbmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzVdLnZhbHVlID0g
ZmV0Y2hSZXN1bHRbMTldCgkJLS0gR2VuZXJhbCBvcHRpb25zCgkJc2V0dGluZ3MuZ2VuZXJhbE9w
dGlvbnMuY2hvaWNlc1syXS52YWx1ZSA9IGZldGNoUmVzdWx0WzIwXQoJCQoJCXNldE9wdGlvbnMo
KQkKCQoJCWxvYWRlZCA9IHRydWUKCWVuZAoJCglpZiB5UHJvbXB0T2Zmc2V0ID4gMCB0aGVuCgkJ
eVByb21wdE9mZnNldCAtPSAxCgllbmQJCgoJcmVjdGZpbGwoMCwgMjU5ICsgeVByb21wdE9mZnNl
dCwgNDgwLCAyNzAsIDYpCglwcmludCgiTG9hZGVkIGNvbmZpZyBmaWxlICIgLi4gc3RvcmFnZVtj
dXJyZW50RmlsZV0gLi4gIi4gUHJlc3MgYW55IGtleSB0byBjb250aW51ZS4uLiIsIDUsIDI2MSAr
IHlQcm9tcHRPZmZzZXQsIDEpCgkKCWlmIGtleXAoKSB0aGVuCgkJZ2VuZXJhdGluZyA9IGZhbHNl
CgllbmQKZW5kCgotLVtbR1JPVVA6RXJyb3JzXV0KZnVuY3Rpb24gZ2VuTG9hZEVycm9yKCkKCXJl
Y3RmaWxsKDAsIDI1OSArIHlQcm9tcHRPZmZzZXQsIDQ4MCwgMjcwLCA2KQoJcHJpbnQoIkVSUk9S
OiBOb3QgYSB2YWxpZCBjb25maWcgZmlsZSIsIDUsIDI2MSArIHlQcm9tcHRPZmZzZXQsIDgpCgkK
CWlmIGVycm9yVGltZXIgPiAwIHRoZW4KCQllcnJvclRpbWVyIC09IDEKCQkKCQlpZiB5UHJvbXB0
T2Zmc2V0ID4gMCB0aGVuCgkJCXlQcm9tcHRPZmZzZXQgLT0gMQoJCWVuZAoJZWxzZQoJCWlmIHlQ
cm9tcHRPZmZzZXQgPCAxMSB0aGVuCgkJCXlQcm9tcHRPZmZzZXQgKz0gMQoJCWVsc2UKCQkJbG9h
ZEVycm9yID0gZmFsc2UKCQllbmQKCWVuZAplbmQKCmZ1bmN0aW9uIGdlbk51bGxFcnJvcigpCgly
ZWN0ZmlsbCgwLCAyNTkgKyB5UHJvbXB0T2Zmc2V0LCA0ODAsIDI3MCwgNikKCXByaW50KCJDb21p
bmcgc29vbiEiLCA1LCAyNjEgKyB5UHJvbXB0T2Zmc2V0LCAxMikKCQoJaWYgZXJyb3JUaW1lciA_
IDAgdGhlbgoJCWVycm9yVGltZXIgLT0gMQoJCQoJCWlmIHlQcm9tcHRPZmZzZXQgPiAwIHRoZW4K
CQkJeVByb21wdE9mZnNldCAtPSAxCgkJZW5kCgllbHNlCgkJaWYgeVByb21wdE9mZnNldCA8IDEx
IHRoZW4KCQkJeVByb21wdE9mZnNldCArPSAxCgkJZWxzZQoJCQlwcm9tcHRFcnJvciA9IGZhbHNl
CgkJCWdlbmVyYXRpbmcgPSBmYWxzZQoJCWVuZAoJZW5kCmVuZAoKLS1bW0dST1VQOkxvb3BzXV0K
ZnVuY3Rpb24gc2F2ZUNvbmZpZygpCglfZ190YmwgPQoJewoJCXNhdmVTZXR1cCwKCQltYWtlRGly
ZWN0b3J5LAoJCXRleHRJbnB1dCwKCQlmaW5hbGl6ZVNhdmUsCgl9CgkKCV9mdW5jID0gX2dfdGJs
W2dlbmVyYXRlU3RlcF0KCQkKCWlmIF9mdW5jIHRoZW4KCQlfZnVuYygpCgllbHNlCgkJZ2VuZXJh
dGluZyA9IGZhbHNlCgllbmQKZW5kCgpmdW5jdGlvbiBsb2FkQ29uZmlnKCkKCV9nX3RibCA9Cgl7
CgkJbWFrZURpcmVjdG9yeSwKCQlsb2FkU2V0dXAsCgkJZmV0Y2hGaWxlLAoJCWZpbmFsaXplTG9h
ZCwKCQlsb2FkRXJyb3IsCgl9CgkKCV9mdW5jID0gX2dfdGJsW2dlbmVyYXRlU3RlcF0KCQkKCWlm
IF9mdW5jIHRoZW4KCQlfZnVuYygpCgllbHNlCgkJZ2VuZXJhdGluZyA9IGZhbHNlCgllbmQKCQoJ
aWYgbG9hZEVycm9yID09IHRydWUgdGhlbgoJCWdlbkxvYWRFcnJvcigpCgllbmQKZW5kCgotLSBU
T0RPOiBTYXZlIGJhY2tncm91bmQKZnVuY3Rpb24gc2F2ZUJhY2tncm91bmQoKQoJX2dfdGJsID0K
CXsKCQoJfQoJCglfZnVuYyA9IF9nX3RibFtnZW5lcmF0ZVN0ZXBdCgkJCglpZiBfZnVuYyB0aGVu
CgkJX2Z1bmMoKQoJZWxzZQoJCWlmIHByb21wdEVycm9yICE9IHRydWUgdGhlbgoJCQlwcm9tcHRF
cnJvciA9IHRydWUKCQkJeVByb21wdE9mZnNldCA9IDExCgkJCWVycm9yVGltZXIgPSAxMjAKCQll
bHNlCgkJCWdlbk51bGxFcnJvcigpCgkJZW5kCgllbmQKZW5kCgotLSBUT0RPOiBTYXZlIHNjcmVl
bnNhdmVyCmZ1bmN0aW9uIHNhdmVTY3JlZW5zYXZlcigpCglfZ190YmwgPQoJewoJCgl9CgkKCV9m
dW5jID0gX2dfdGJsW2dlbmVyYXRlU3RlcF0KCQkKCWlmIF9mdW5jIHRoZW4KCQlfZnVuYygpCgll
bHNlCgkJaWYgcHJvbXB0RXJyb3IgIT0gdHJ1ZSB0aGVuCgkJCXByb21wdEVycm9yID0gdHJ1ZQoJ
CQl5UHJvbXB0T2Zmc2V0ID0gMTEKCQkJZXJyb3JUaW1lciA9IDEyMAoJCWVsc2UKCQkJZ2VuTnVs
bEVycm9yKCkKCQllbmQKCWVuZAplbmQKOjogZ2Z4Lwo6OiBnZngvLmluZm8ucG9kCmI2NCRMUzFi
VzNCdlpDeGpjbVZoZEdWa1BTSXlNREkxTFRBNUxUSXlJREl5T2pRMk9qSTFJaXh0YjJScFptbGxa
RDBpTWpBeU5TMHgKTUMweU15QXhPRG96TmpveU1TSmRYUT09Cjo6IGdmeC8wLmx1YQpiNjQkTFMx
YlczQnZaQ3hqY21WaGRHVmtQU0l5TURJMUxUQTVMVEl6SURFNE9qSTJPakUwSWl4dGIyUnBabWxs
WkQwaU1qQXlOUzB3Ck9TMHlOU0F5TWpveU56bzFNeUlzY21WMmFYTnBiMjQ5TXpGZFhXeDZOQUJf
QUFBQUVqRUFBUE1oZTFzd1hUMTdZbTF3UFhCNGRRQkQKSUJBUUJQQldCeEFId0JmUUY4QUhFQWZ3
Vml4bWJHRm5jejB3TEhCaGJsOTRDQURMZVQwd0xIcHZiMjA5T0gwc1BnQWY4REVBLS0tLQotLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0x
MUJ0UFRoOWZRPT0KOjogbWFpbi5sdWEKLS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAy
NS0wOS0xNiAyMDoyMjoxMSIsbW9kaWZpZWQ9IjIwMjUtMTAtMDEgMDI6MDM6NDciLHJldmlzaW9u
PTEwMTUseHN0aWNrZXJzPXt9XV0KaW5jbHVkZSgic2V0dGluZ3MubHVhIikKCmZ1bmN0aW9uIHBh
aW50KCkKCV9jb2xvcnMgPSBjdXN0Q29sb3JzLmVuYWJsZWQgPT0gMCBhbmQgcGFsZXR0ZXNbcGFs
ZXR0ZV0gb3IgY3VzdENvbG9ycwoJbXlUYWJsZSA9IHt9Cgl0aW1lciA9IHQoKSAtIHN0YXJ0VGlt
ZQoJdGljayA9c2luKHRpbWVyIC8gc2l6ZUNoYW5nZVNwZWVkKSAqIHNpemVWYXIKCQoJeCA9IHNp
bih0aW1lciAvIHhUaWNrICsgeE9mZnNldCAvIDEwMCkKCXkgPSBjb3ModGltZXIgLyB5VGljayAr
IHlPZmZzZXQgLyAxMDApCgoJZm9yIGk9MCx3aWR0aCBkbwoJCWZvciBqPTAsaGVpZ2h0IGRvCgkJ
CW15VGFibGVbI215VGFibGUgKyAxXSA9IHt4ID0gaSAqICgoMjQwIC8gd2lkdGgpICogMikgKiB4
LCB5ID0gaiAqICgoMTIwIC8gaGVpZ2h0KSAqIDIpICogeX0KCQllbmQKCWVuZAkKCglmb3Igaz0x
LDQgZG8KCWt4ID0geltrXS54CglreSA9IHpba10ueQoJCWZvciBqPTEscmVkcmF3ICsgMSBkbwoJ
CQlqeCA9IGRvdFNpemUgLSAoaiAqIHJlZHJhd0ZhY3RvcikKCQkJZm9yIGk9MSwjbXlUYWJsZSBk
bwoJCQkJaXggPSBteVRhYmxlW2ldLngKCQkJCWl5ID0gbXlUYWJsZVtpXS55CgkJCQl6eCA9IChp
eCAqIGt5KSAqIHpvb20gKyAyNDAgKyBhbGxYT2Zmc2V0CgkJCQl6eSA9IChpeSAqIGt4KSAqIHpv
b20gKyAxMzUgKyBhbGxZT2Zmc2V0CgkJCQlpeiA9IGkgJSA2ICsgMQoJCQkJCgkJCQljaXJjZmls
bCh6eCx6eSwoangrdGljaykgKiB6b29tLF9jb2xvcnNbZmxyKGkvY29sb3JNb2QpJTQrMV0pCgkJ
CWVuZAoJCWVuZAoJZW5kCmVuZAoKZnVuY3Rpb24gc3RhZ2VDb25maWcoX21lbnVOYW1lLCBfaSwg
X2opCglmb3IgX2kgPSAxLCBfaiBkbwoJCXNldHRpbmdzW19tZW51TmFtZV0uY2hvaWNlc1tfaV0u
dmFsdWUgPSBmZXRjaFJlc3VsdFtmZXRjaENvdW50ZXJdCgkJZmV0Y2hDb3VudGVyICs9IDEKCWVu
ZAplbmQKCmZ1bmN0aW9uIGxvYWRDb25maWcoKQoJZmV0Y2hSZXN1bHQgPSBmZXRjaCgidGhlbWUu
cG9kIikKCWZldGNoQ291bnRlciA9IDEKCQoJaWYgZmV0Y2hSZXN1bHRbMF0gPT0gImdvZ2giIHRo
ZW4KCQlzdGFnZUNvbmZpZygiY291bnRPcHRpb25zIiwgMSwgMikKCQlzdGFnZUNvbmZpZygiY29s
b3JPcHRpb25zIiwgMSwgNSkKCQlzdGFnZUNvbmZpZygib3NjaWxsYXRpb25PcHRpb25zIiwgMSwg
NCkKCQlzdGFnZUNvbmZpZygic2l6ZU9wdGlvbnMiLCAxLCA2KQoJCXN0YWdlQ29uZmlnKCJjdXN0
b21Db2xvcnMiLCAxLCA1KQoJCXN0YWdlQ29uZmlnKCJnZW5lcmFsT3B0aW9ucyIsIDIsIDIpCgll
bmQKZW5kCgpmdW5jdGlvbiBzZXRPcHRpb25zKCkKCS0tIENvdW50IG9wdGlvbnMKCXdpZHRoID0g
c2V0dGluZ3MuY291bnRPcHRpb25zLmNob2ljZXNbMV0udmFsdWUKCWhlaWdodCA9IHNldHRpbmdz
LmNvdW50T3B0aW9ucy5jaG9pY2VzWzJdLnZhbHVlCgktLSBDb2xvciBvcHRpb25zCglwYWxldHRl
ID0gc2V0dGluZ3MuY29sb3JPcHRpb25zLmNob2ljZXNbMV0udmFsdWUKCWNvbG9yTW9kID0gc2V0
dGluZ3MuY29sb3JPcHRpb25zLmNob2ljZXNbMl0udmFsdWUKCWRvdHNGaWxsZWQgPSBzZXR0aW5n
cy5jb2xvck9wdGlvbnMuY2hvaWNlc1szXS52YWx1ZQoJcmVkcmF3ID0gc2V0dGluZ3MuY29sb3JP
cHRpb25zLmNob2ljZXNbNF0udmFsdWUKCXJlZHJhd0ZhY3RvciA9IHNldHRpbmdzLmNvbG9yT3B0
aW9ucy5jaG9pY2VzWzVdLnZhbHVlCgktLSBPc2NpbGxhdGlvbiBvcHRpb25zCgl4VGljayA9IHNl
dHRpbmdzLm9zY2lsbGF0aW9uT3B0aW9ucy5jaG9pY2VzWzFdLnZhbHVlCgl5VGljayA9IHNldHRp
bmdzLm9zY2lsbGF0aW9uT3B0aW9ucy5jaG9pY2VzWzJdLnZhbHVlCgl4T2Zmc2V0ID0gc2V0dGlu
Z3Mub3NjaWxsYXRpb25PcHRpb25zLmNob2ljZXNbM10udmFsdWUKCXlPZmZzZXQgPSBzZXR0aW5n
cy5vc2NpbGxhdGlvbk9wdGlvbnMuY2hvaWNlc1s0XS52YWx1ZQoJLS0gU2l6ZSBvcHRpb25zCglk
b3RTaXplID0gc2V0dGluZ3Muc2l6ZU9wdGlvbnMuY2hvaWNlc1sxXS52YWx1ZQoJc2l6ZVZhciA9
IHNldHRpbmdzLnNpemVPcHRpb25zLmNob2ljZXNbMl0udmFsdWUKCXNpemVDaGFuZ2VTcGVlZCA9
IHNldHRpbmdzLnNpemVPcHRpb25zLmNob2ljZXNbM10udmFsdWUKCWFsbFlPZmZzZXQgPSBzZXR0
aW5ncy5zaXplT3B0aW9ucy5jaG9pY2VzWzRdLnZhbHVlCglhbGxYT2Zmc2V0ID0gc2V0dGluZ3Mu
c2l6ZU9wdGlvbnMuY2hvaWNlc1s1XS52YWx1ZQoJem9vbSA9IHNldHRpbmdzLnNpemVPcHRpb25z
LmNob2ljZXNbNl0udmFsdWUgLyAxMDAKCS0tIEN1c3RvbSBjb2xvcnMKCWN1c3RDb2xvcnNbMV0g
PSBzZXR0aW5ncy5jdXN0b21Db2xvcnMuY2hvaWNlc1s0XS52YWx1ZQoJY3VzdENvbG9yc1syXSA9
IHNldHRpbmdzLmN1c3RvbUNvbG9ycy5jaG9pY2VzWzNdLnZhbHVlCgljdXN0Q29sb3JzWzNdID0g
c2V0dGluZ3MuY3VzdG9tQ29sb3JzLmNob2ljZXNbMl0udmFsdWUKCWN1c3RDb2xvcnNbNF0gPSBz
ZXR0aW5ncy5jdXN0b21Db2xvcnMuY2hvaWNlc1sxXS52YWx1ZQoJY3VzdENvbG9ycy5lbmFibGVk
ID0gc2V0dGluZ3MuY3VzdG9tQ29sb3JzLmNob2ljZXNbNV0udmFsdWUKCWNvbG9ycyA9IGN1c3RD
b2xvcnMuZW5hYmxlZCA9PSAwIGFuZCBwYWxldHRlc1twYWxldHRlXSBvciBjdXN0Q29sb3JzCgkt
LSBHZW5lcmFsIG9wdGlvbnMKCXJlc2V0QW5pbSA9IHNldHRpbmdzLmdlbmVyYWxPcHRpb25zLmNo
b2ljZXNbMV0udmFsdWUKCWNsZWFyRG90cyA9IHNldHRpbmdzLmdlbmVyYWxPcHRpb25zLmNob2lj
ZXNbMl0udmFsdWUKZW5kCgpmdW5jdGlvbiB2aWV3U3RhdHMoKQoJc2V0X2RyYXdfdGFyZ2V0KGJ1
ZikKCWNscygpCglwcmludChzdGF0KDApLCAxLCAxLCA3KQoJcHJpbnQoc3RhdCgxKSwgMSwgMTUs
IDcpCglzZXRfZHJhd190YXJnZXQoKQoJYmxpdChidWYpCmVuZAoKLS1bW0dST1VQOkxvb3BzXV0K
ZnVuY3Rpb24gX2luaXQoKQoJaCA9IDEKCWJ1ZiA9IHVzZXJkYXRhKCJ1OCIsIDQ4MCwgMjcwKQoJ
bG9hZGVkID0gZmFsc2UKCXN0YXJ0VGltZSA9IHQoKQoJbG9hZENvbmZpZygpCglzZXRPcHRpb25z
KCkKZW5kCgpmdW5jdGlvbiBfZHJhdygpCQoJaWYgaCA_IDAgb3IgY2xlYXJEb3RzID09IDEgdGhl
bgoJCWNscyhjb2xvcnNbNF0pCgkJaCA9IDAKCWVuZAoJcGFpbnQoKQoJLS0gdmlld1N0YXRzKCkK
ZW5kCjo6IHNldHRpbmdzLmx1YQotLVtbcG9kX2Zvcm1hdD0icmF3IixjcmVhdGVkPSIyMDI1LTA5
LTI2IDIzOjU0OjI0Iixtb2RpZmllZD0iMjAyNS0xMC0wMSAwMjowMzoxNCIscmV2aXNpb249Nyx4
c3RpY2tlcnM9e31dXQotLVtbQk9PS01BUks6Q29sb3JzXV0KcGFsZXR0ZXMgPSAKewoJezIzLCAx
NCwgMzAsIDgsfSwKCXs3LCAxNSwgMzEsIDQsfSwKCXs3LCAxMCwgOSwgMjUsfSwKCXsyNiwgMTEs
IDI3LCAzLH0sCgl7MjgsIDEyLCAxNiwgMSx9LAoJezYsIDIyLCA1LCAyMSx9LAoJezMxLCAxNCwg
MjYsIDEyLH0sCgl7NywgMjksIDEzLCAxOCx9LAoJezI3LCAxMCwgOCwgMix9LAoJezE1LCAxMCwg
MjUsIDIwLH0sCgl7MjMsIDI5LCA4LCAzMCx9LAoJezgsIDcsIDI3LCA3LH0sCgl7OCwgNywgMTIs
IDcsfSwKCXsxLCA3LCAxLCA3LH0sCgl7MjgsIDE3LCAxOSwgMyx9LAoJezgsIDEwLCAxMSwgMTIs
fSwKCXs3LCAyOCwgNywgMjMsfSwKCXs3LCAyOCwgMTcsIDE2LH0sCgl7NywgMTQsIDI1LCAyNCx9
LAoJezcsIDEwLCAxOCwgMSx9LAoJezE0LCAyOCwgMjAsIDIxLH0sCgl7OCwgMTgsIDE4LCAxNix9
LAoJezgsIDEwLCAxMCwgMjgsfSwKCXsxLCA1LCA3LCAyLH0sCgl7NywgMTIsIDgsIDE4LH0sCgl7
MzAsIDExLCAxMSwgMTIsfSwKCXsxMCwgMTAsIDEwLCAxOCx9LAoJezE0LCA3LCAzMCwgMTYsfSwK
CXsyOSwgNywgNywgMjcsfSwKCXsyNiwgNywgNiwgNSx9LAoJezcsIDI5LCAyMywgMTQsfSwKCXs3
LCAyOSwgMjgsIDEyLH0sCgl7NywgMjksIDIzLCAyOCx9LAoJezcsIDEwLCA2LCA1LH0sCn0KCnJh
aW5ib3cgPSB7OCwgMjQsIDI1LCA5LCAxMCwgMjYsIDExLCAyNywgMTcsIDEyLCAyOCwgMjksIDIz
LCAxNCwgMzAsfQoKY3VzdENvbG9ycyA9IHt9CgotLVtbQk9PS01BUks6U2V0dGluZ3NdXQotLSBU
eXBlczoKLS0JCTE6IE1haW4gbWVudQotLQkJMjogU3ViLW1lbnUsIGNhbid0IGdvIGRlZXBlcgot
LQkJMzogTnVtYmVyIGl0ZW0KLS0JCTQ6IFRvZ2dsZSBpdGVtCi0tCQk1OiBDdXN0b20gY29sb3Ig
aXRlbQotLQkJNjogQnV0dG9uCi0tCQk3OiBHbyBiYWNrCnNldHRpbmdzID0KewoJY291bnRPcHRp
b25zID0KCXsKCQl0ZXh0ID0gIlBvaW50IENvdW50IE9wdGlvbnMiLCB0TGVuZ3RoID0gMjAgKiA1
IC0gMiwgdHlwZSA9IDIsCgkJY2hvaWNlcyA9CgkJewoJCQl7dGV4dCA9ICJWZXJ0aWNhbCBDb3Vu
dDogIiwgdExlbmd0aCA9IDc1LCB2YWx1ZSA9IDMsIGluY3JlbWVudCA9IDEsIG1pblZhbCA9IDEs
IG1heFZhbCA9IDk5OSwgdHlwZSA9IDMsfSwKCQkJe3RleHQgPSAiSG9yaXpvbnRhbCBDb3VudDog
IiwgdExlbmd0aCA9IDg1LCB2YWx1ZSA9IDUsIGluY3JlbWVudCA9IDEsIG1pblZhbCA9IDEsIG1h
eFZhbCA9IDk5OSwgdHlwZSA9IDMsfSwKCQl9LAoJfSwKCWNvbG9yT3B0aW9ucyA9IAoJewoJCXRl
eHQgPSAiRHJhdyBPcHRpb25zIiwgdExlbmd0aCA9IDEzICogNSArIDMsIHR5cGUgPSAyLAoJCWNo
b2ljZXMgPQoJCXsKCQkJe3RleHQgPSAiUGFsZXR0ZTogIiwgdExlbmd0aCA9IDQxLCB2YWx1ZSA9
IDUsIGluY3JlbWVudCA9IDEsIG1pblZhbCA9IDEsIG1heFZhbCA9ICNwYWxldHRlcywgdHlwZSA9
IDMsfSwKCQkJe3RleHQgPSAiQ29sb3IgVmFyaWF0aW9uOiAiLCB0TGVuZ3RoID0gNzksIHZhbHVl
ID0gNiwgaW5jcmVtZW50ID0gMSwgbWluVmFsID0gMCwgbWF4VmFsID0gOTk5LCB0eXBlID0gMyx9
LAoJCQl7dGV4dCA9ICJGaWxsZWQgUG9pbnRzOiAiLCB0TGVuZ3RoID0gMTUgKiA1LCB2YWx1ZSA9
IDEsIGluY3JlbWVudCA9IDEsIG1pblZhbCA9IDAsIG1heFZhbCA9IDEsIHR5cGUgPSA0LH0sCgkJ
CXt0ZXh0ID0gIlJlZHJhdzogIiwgdExlbmd0aCA9IDggKiA1LCB2YWx1ZSA9IDAsIGluY3JlbWVu
dCA9IDEsIG1pblZhbCA9IDAsIG1heFZhbCA9IDEwLCB0eXBlID0gMyx9LAoJCQl7dGV4dCA9ICJS
ZWRyYXcgRmFjdG9yOiAiLCB0TGVuZ3RoID0gMTYgKiA1LCB2YWx1ZSA9IDEsIGluY3JlbWVudCA9
IDEsIG1pblZhbCA9IDEsIG1heFZhbCA9IDk5OSwgdHlwZSA9IDMsfSwKCQl9LAoJfSwKCXNpemVP
cHRpb25zID0KCXsKCQl0ZXh0ID0gIlBvc2l0aW9uIE9wdGlvbnMiLCB0TGVuZ3RoID0gMTYgKiA1
ICsgMiwgdHlwZSA9IDIsCgkJY2hvaWNlcyA9CgkJewoJCQl7dGV4dCA9ICJEb3QgU2l6ZTogIiwg
dExlbmd0aCA9IDQ2LCB2YWx1ZSA9IDI0LCBpbmNyZW1lbnQgPSAxLCBtaW5WYWwgPSA0LCBtYXhW
YWwgPSA5OTksIHR5cGUgPSAzLH0sCgkJCXt0ZXh0ID0gIlNpemUgVmFyaWF0aW9uOiAiLCB0TGVu
Z3RoID0gNzQsIHZhbHVlID0gMjAsIGluY3JlbWVudCA9IDEsIG1pblZhbCA9IDAsIG1heFZhbCA9
IDk5OSwgdHlwZSA9IDMsfSwKCQkJe3RleHQgPSAiU2l6ZSBDaGFuZ2UgU3BlZWQ6ICIsIHRMZW5n
dGggPSA5MSwgdmFsdWUgPSAxMCwgaW5jcmVtZW50ID0gMSwgbWluVmFsID0gMCwgbWF4VmFsID0g
OTk5LCB0eXBlID0gMyx9LAoJCQl7dGV4dCA9ICJPdmVyYWxsIFkgT2Zmc2V0OiAiLCB0TGVuZ3Ro
ID0gODUsIHZhbHVlID0gMCwgaW5jcmVtZW50ID0gMSwgbWluVmFsID0gLTk5OSwgbWF4VmFsID0g
OTk5LCB0eXBlID0gMyx9LAoJCQl7dGV4dCA9ICJPdmVyYWxsIFggT2Zmc2V0OiAiLCB0TGVuZ3Ro
ID0gODUsIHZhbHVlID0gMCwgaW5jcmVtZW50ID0gMSwgbWluVmFsID0gLTk5OSwgbWF4VmFsID0g
OTk5LCB0eXBlID0gMyx9LAoJCQl7dGV4dCA9ICJab29tOiAiLCB0TGVuZ3RoID0gNiAqIDUsIHZh
bHVlID0gMTAwLCBpbmNyZW1lbnQgPSAxLCAgbWluVmFsID0gMSwgbWF4VmFsID0gOTk5LCB0eXBl
ID0gMyx9LAoJCX0sCgl9LAoJb3NjaWxsYXRpb25PcHRpb25zID0KCXsKCQl0ZXh0ID0gIk9zY2ls
bGF0aW9uIE9wdGlvbnMiLCB0TGVuZ3RoID0gMTkgKiA1LCB0eXBlID0gMiwKCQljaG9pY2VzID0K
CQl7CgkJCXt0ZXh0ID0gIlggU3BlZWQ6ICIsIHRMZW5ndGggPSA0MiwgdmFsdWUgPSAxNSwgaW5j
cmVtZW50ID0gMSwgbWluVmFsID0gMSwgbWF4VmFsID0gOTk5LCB0eXBlID0gMyx9LAoJCQl7dGV4
dCA9ICJZIFNwZWVkOiAiLCB0TGVuZ3RoID0gNDIsIHZhbHVlID0gMjAsIGluY3JlbWVudCA9IDEs
IG1pblZhbCA9IDEsIG1heFZhbCA9IDk5OSwgdHlwZSA9IDMsfSwKCQkJe3RleHQgPSAiWCBPZmZz
ZXQ6ICIsIHRMZW5ndGggPSA0NywgdmFsdWUgPSAwLCBpbmNyZW1lbnQgPSAxLCBtaW5WYWwgPSAw
LCBtYXhWYWwgPSAxMDAsIHR5cGUgPSAzLH0sCgkJCXt0ZXh0ID0gIlkgT2Zmc2V0OiAiLCB0TGVu
Z3RoID0gNDcsIHZhbHVlID0gMCwgaW5jcmVtZW50ID0gMSwgbWluVmFsID0gMCwgbWF4VmFsID0g
MTAwLCB0eXBlID0gMyx9LAoJCX0sCgl9LAoJY3VzdG9tQ29sb3JzID0KCXsKCQl0ZXh0ID0gIkN1
c3RvbSBDb2xvcnMiLCB0TGVuZ3RoID0gMTQgKiA1LCB0eXBlID0gMiwKCQljaG9pY2VzID0KCQl7
CgkJCXt0ZXh0ID0gIkNvbG9yIDQ6ICIsIHRMZW5ndGggPSA4ICogNSArIDEsIHZhbHVlID0gMSwg
aW5jcmVtZW50ID0gMSwgbWluVmFsID0gMCwgbWF4VmFsID0gMzEsIHR5cGUgPSA1LH0sCgkJCXt0
ZXh0ID0gIkNvbG9yIDM6ICIsIHRMZW5ndGggPSA4ICogNSArIDEsIHZhbHVlID0gMTYsIGluY3Jl
bWVudCA9IDEsIG1pblZhbCA9IDAsIG1heFZhbCA9IDMxLCB0eXBlID0gNSx9LAoJCQl7dGV4dCA9
ICJDb2xvciAyOiAiLCB0TGVuZ3RoID0gOCAqIDUgKyAxLCB2YWx1ZSA9IDEyLCBpbmNyZW1lbnQg
PSAxLCBtaW5WYWwgPSAwLCBtYXhWYWwgPSAzMSwgdHlwZSA9IDUsfSwKCQkJe3RleHQgPSAiQ29s
b3IgMTogIiwgdExlbmd0aCA9IDggKiA1ICsgMSwgdmFsdWUgPSAyOCwgaW5jcmVtZW50ID0gMSwg
bWluVmFsID0gMCwgbWF4VmFsID0gMzEsIHR5cGUgPSA1LH0sCgkJCXt0ZXh0ID0gIkVuYWJsZWQ6
ICIsIHRMZW5ndGggPSA4ICogNSArIDEsIHZhbHVlID0gMCwgaW5jcmVtZW50ID0gMSwgbWluVmFs
ID0gMCwgbWF4VmFsID0gMSwgdHlwZSA9IDQsfSwKCQl9Cgl9LAoJZ2VuZXJhbE9wdGlvbnMgPQoJ
ewoJCXRleHQgPSAiR2VuZXJhbCBPcHRpb25zIiwgdExlbmd0aCA9IDE1ICogNSArIDMsIHR5cGUg
PSAyLAoJCWNob2ljZXMgPQoJCXsKCQkJe3RleHQgPSAiUmVzZXQgYW5pbWF0aW9uIG9uIHNldHRp
bmcgY2hhbmdlIiwgdExlbmd0aCA9IDMzICogNSArIDMsIHZhbHVlID0gMSwgaW5jcmVtZW50ID0g
MSwgbWluVmFsID0gMCwgbWF4VmFsID0gMSwgdHlwZSA9IDQsfSwKCQkJe3RleHQgPSAiQ2xlYXIg
c2NyZWVuIGFmdGVyIGRyYXdpbmcgZG90cyIsIHRMZW5ndGggPSAzMSAqIDUgKyA0LCB2YWx1ZSA9
IDAsIGluY3JlbWVudCA9IDEsIG1pblZhbCA9IDAsIG1heFZhbCA9IDEsIHR5cGUgPSA0LH0sCgkJ
fQoJfSwKCWdlbmVyYXRlT3B0aW9ucyA9Cgl7CgkJdGV4dCA9ICJHZW5lcmF0ZSIsIHRMZW5ndGgg
PSA5ICogNSwgdHlwZSA9IDIsCgkJY2hvaWNlcyA9CgkJewoJCQl7dGV4dCA9ICJHbyBiYWNrIiwg
dExlbmd0aCA9IDggKiA1LCB0eXBlID0gNyx9LAoJCQl7dGV4dCA9ICJTYXZlIGNvbmZpZyBmaWxl
IiwgdExlbmd0aCA9IDE2ICogNSArIDIsIHR5cGUgPSA2LH0sCgkJCXt0ZXh0ID0gIkxvYWQgY29u
ZmlnIGZpbGUiLCB0TGVuZ3RoID0gMTYgKiA1ICsgMiwgdHlwZSA9IDYsfSwKCQkJe3RleHQgPSAi
U2F2ZSBhcyBiYWNrZ3JvdW5kIiwgdExlbmd0aCA9IDE5ICogNSwgdHlwZSA9IDYsfSwKCQkJe3Rl
eHQgPSAiU2F2ZSBhcyBzY3JlZW5zYXZlciIsIHRMZW5ndGggPSAyMCAqIDUsIHR5cGUgPSA2LH0s
CgkJCXt0ZXh0ID0gIlNhdmUgdG8gYXBwZGF0YSIsIHRMZW5ndGggPSAxNiAqIDUgKyAyLCB0eXBl
ID0gNix9LAoJCX0KCX0KfQoKeiA9IAp7Cnt4ID0gMSwgeSA9IDEsfSwKe3ggPSAtMSwgeSA9IDEs
fSwKe3ggPSAxLCB5ID0gLTEsfSwKe3ggPSAtMSwgeSA9IC0xLH0sCn0KOjogc2Z4Lwo6OiBzZngv
LmluZm8ucG9kCmI2NCRMUzFiVzNCdlpDeGpjbVZoZEdWa1BTSXlNREkxTFRBNUxUSTFJREU0T2pF
NE9qTXdJaXh0YjJScFptbGxaRDBpTWpBeU5TMHgKTUMweU15QXhPRG96TmpveU1TSmRYUT09Cjo6
IHNuZC8KOjogc25kLy5pbmZvLnBvZApiNjQkTFMxYlczQnZaQ3hqY21WaGRHVmtQU0l5TURJMUxU
QTVMVEkxSURFNE9qRTRPakkySWl4dGIyUnBabWxsWkQwaU1qQXlOUzB4Ck1DMHlNeUF4T0Rvek5q
b3lNU0pkWFE9PQo6OiBzbmQvc2Z4Lmx1YQotLVtbcG9kX2Zvcm1hdD0icmF3IixjcmVhdGVkPSIy
MDI1LTA5LTI1IDE4OjM1OjA5Iixtb2RpZmllZD0iMjAyNS0wOS0yNiAyMToxMDowMCIscmV2aXNp
b249MV1dCgo6OiB0aGVtZS5wb2QKYjY0JExTMWJXM0J2WkN4amNtVmhkR1ZrUFNJeU1ESTFMVEE1
TFRJM0lEQXhPak16T2pVNElpeHRiMlJwWm1sbFpEMGlNakF5TlMweApNQzB3TWlBd01Ub3pNem96
TkNJc2NtVjJhWE5wYjI0OU5sMWRiSG8wQUQ4QUFBQkVBQUFBOEJGN1d6QmRQU0puYjJkb0lpd3pM
RFVzCk5TdzJMREVzTUN3eExERTFMREl3TEFJQUlESTBDZ0FTTVEwQUlURXdIUURBTml3eE1pd3lP
Q3d3TERCOQo6OiBbZW9jXQo=
:: log.txt
--[[pod_format="raw",created="2025-09-27 01:33:58",modified="2025-09-30 19:32:36",revision=2]]
Unable to write file to /appdata/system/wallpapers/test.p64
:: main.lua
--[[pod_format="raw",created="2025-09-16 20:22:11",modified="2025-10-03 21:33:03",revision=1001,xstickers={}]]
include("settings.lua")
include("generate.lua")

function paint()
	_colors = custColors.enabled == 0 and palettes[palette] or custColors
	myTable = {}
	timer = t() - startTime
	tick =sin(timer / sizeChangeSpeed) * sizeVar
	
	x = sin(timer / xTick + xOffset / 100)
	y = cos(timer / yTick + yOffset / 100)

	for i=0,width do
		for j=0,height do
			myTable[#myTable + 1] = {x = i * ((240 / width) * 2) * x, y = j * ((120 / height) * 2) * y}
		end
	end	

	for k=1,4 do
	kx = z[k].x
	ky = z[k].y
		for j=1,redraw + 1 do
			jx = dotSize - (j * redrawFactor)
			for i=1,#myTable do
				ix = myTable[i].x
				iy = myTable[i].y
				zx = (ix * ky) * zoom + 240 + allXOffset
				zy = (iy * kx) * zoom + 135 + allYOffset
				iz = i % 6 + 1
				
				_func = dotsFilled == 1 and circfill or circ
				
				_func(zx,zy,(jx+tick) * zoom,_colors[flr(i/colorMod)%4+1])
			end
		end
	end
end

function showSelector(_x, _y)
	_selectorX = (sin(timer / 3) * 12) + _x + selectorXMod
	_selectorY = (cos(timer / 2) * 8) + _y
	
	circfill(_selectorX, _selectorY, 2, rainbow[flr(timer * 10) % #rainbow + 1])

	if selectorXMod != 0 then
		selectorXMod -= selectorXMod / 10
	end
end

-- TODO: Beautify GUI
function showMenu()
	_right = 480 - 36
	_bottom = 270 - 3
	_colors = custColors.enabled == 0 and palettes[palette] or custColors
	
	for i = 1, #options.choices do
		-- Set frame of reference for drawn elements based on sequence in list
		if not options.choices[i].tLength then
			_log = "ERROR: Could not find 'tLength' variable for " .. tostring(options.choices[i].text)
			store("showMenu_log.txt", _log)
		end
		_x = _right - options.choices[i].tLength
		_y = _bottom - i * 16
		_x2 = options.choices[i].tLength
		_y2 = 12
		
		_valX = _right - 5
		_valWidth = 20
		_textX = _right - 2 + (8 - 2.5 * #tostring(options.choices[i].value))
		_textY = _y + 2
		
		-- Set color values for text boxes - current selection has different color
		foreColor = selection == i and custColors.enabled == 0 and _colors[1] or custColors.enabled == 0 and _colors[4] or  options.choices[i].type == 4 and _colors[4] or custColors.enabled == 1 and selection == i and 6 or 1
		foreText = selection == i and custColors.enabled == 0 and _colors[4] or custColors.enabled == 0 and _colors[1] or 7
		
		backColor = custColors.enabled == 0 and options.choices[i].type != 5 and palettes[palette][4] or 1
	
		-- Draw text boxes
		rrectfill(_x - 20, _y + 1, _x2 + 1, _y2 + 1, 2, backColor)
		rrectfill(_x - 20, _y, _x2, _y2, 2, 7)
		print(options.choices[i].text, _x - 17, _y + 2, 1)
		
		-- Draw value boxes
		rrectfill(_valX, _y + 1, _valWidth, _y2 + 1, 2, backColor)
		rrectfill(_valX, _y, _valWidth, _y2, 2, foreColor)
		print(options.choices[i].value, _textX, _textY, foreText)
		
		if selection == i then
			showSelector(_valX + _valWidth / 2, _y + _y2 / 2)
		end
	end
end

function setOptions()
	-- Count options
	width = settings.countOptions.choices[1].value
	height = settings.countOptions.choices[2].value
	-- Color options
	palette = settings.colorOptions.choices[1].value
	colorMod = settings.colorOptions.choices[2].value
	dotsFilled = settings.colorOptions.choices[3].value
	redraw = settings.colorOptions.choices[4].value
	redrawFactor = settings.colorOptions.choices[5].value
	-- Oscillation options
	xTick = settings.oscillationOptions.choices[1].value
	yTick = settings.oscillationOptions.choices[2].value
	xOffset = settings.oscillationOptions.choices[3].value
	yOffset = settings.oscillationOptions.choices[4].value
	-- Size options
	dotSize = settings.sizeOptions.choices[1].value
	sizeVar = settings.sizeOptions.choices[2].value
	sizeChangeSpeed = settings.sizeOptions.choices[3].value
	allYOffset = settings.sizeOptions.choices[4].value
	allXOffset = settings.sizeOptions.choices[5].value
	zoom = settings.sizeOptions.choices[6].value / 100
	-- Custom colors
	custColors[1] = settings.customColors.choices[4].value
	custColors[2] = settings.customColors.choices[3].value
	custColors[3] = settings.customColors.choices[2].value
	custColors[4] = settings.customColors.choices[1].value
	custColors.enabled = settings.customColors.choices[5].value
	colors = custColors.enabled == 0 and palettes[palette] or custColors
	-- General options
	resetAnim = settings.generalOptions.choices[1].value
	clearDots = settings.generalOptions.choices[2].value
	
	-- Reset start time 
	if resetAnim == 1 then
		startTime = t()
		set_draw_target(buf)
		cls(colors[4])
		set_draw_target()
	end
	
end

function drawInstructions(_x, _y)
	if generating == false then
		instSize = #instructions[options.choices[selection].type - 1]
		
			

		rrect(_x, 262 - _y - 11 * instSize, 150, 9 + 11 * instSize, 3, palettes[palette][1])
		rrectfill(_x, 262 - _y - 11 * instSize, 150, 8 + 11 * instSize, 3, 1)
		rrectfill(_x, 262 - _y - 11 * instSize, 150, 7 + 11 * instSize, 3, 7)
		
		for i = 1, instSize do
			print(instructions[options.choices[selection].type - 1][i], _x + 10, 267 - _y - 11 * i, 1)
		end
	end
end

function menuNav()
	-- Toggle up and down menu
	if btnp(2) then
		selection = (selection + 1) % #options.choices
	elseif btnp(3) then
		selection = (selection - 1) % #options.choices
	end
	
	selection = selection == 0 and #options.choices or selection
	_choice = options.choices[selection]
	print(tostring(options[selection]),0,0,7)
	
	if options.type == 1 then
		-- Change current menu based on selection
		if btnp(4) then
			options = options.choices[selection]
			selection = #options.choices
		end
	elseif options.type == 2 then
		if options.choices[selection].type >= 3 and options.choices[selection].type <= 5 then
			_incMod = key("ctrl") == true and 5 or key("shift") == true and 10 or 1
		
			-- Toggle value up / down	
			if btnp(0) then
				_choice.value -= _choice.increment * _incMod
				_choice.value = _choice.value < _choice.minVal and _choice.minVal or _choice.value
		
				selectorXMod = -20
				setOptions()
			elseif btnp(1) then
				_choice.value += _choice.increment * _incMod
				_choice.value = _choice.value > _choice.maxVal and _choice.maxVal or _choice.value
				
				selectorXMod = 20
				setOptions()
			elseif btnp(4) then
				options = settings.mainOptions
				selection = #options.choices
			end
		elseif options.choices[selection].type >= 6 then
			if btnp(4) then
				generateStep = 1
				generating = true
			end
		end
	end
end

function generateFunction()
	options = options.choices[selection].type == 7 and settings.mainOptions or options
				
	_c_tbl =
	{
		[2] = saveConfig,
		[3] = loadConfig,
		[4] = saveBackground,
		[5] = saveScreensaver,
		[6] = saveApp,
	}
	
	_func = _c_tbl[selection]
	
	if _func then
		_func()
	else
		generating = false
	end
end

--[[GROUP:Loops]]
function _init()
	--initializeSettings()
	buf = userdata("u8", 480, 270)
	h = 1
	generating = false
	startTime = t()
	
	settings = setTextLength(settings)
	setOptions()
end

function _update()
	if generating == false then
		if btnp(5) then
			menu = menu == false and true or false
		end
		
		if menu == true then
			menuNav()
		end
	end
end

function _draw()
	
	if h > 0 or clearDots == 1 then
		set_draw_target(buf)
		cls(colors[4])
		set_draw_target()
		h -= 1
	end
	
	set_draw_target(buf)	
	if h > 0 then
		cls(colors[4])
	end
	paint()
	set_draw_target()
	
	blit(buf)
	
	if menu == true then
		showMenu()
		drawInstructions(20, 5)
	end
	
	if generating == true then
		generateFunction()
	end
end
:: settings.lua
--[[pod_format="raw",created="2025-09-24 00:54:47",modified="2025-10-03 21:33:41",revision=160,xstickers={}]]
--[[BOOKMARK:Colors]]
palettes = 
{
	{23, 14, 30, 8,},
	{7, 15, 31, 4,},
	{7, 10, 9, 25,},
	{26, 11, 27, 3,},
	{28, 12, 16, 1,},
	{6, 22, 5, 21,},
	{31, 14, 26, 12,},
	{7, 29, 13, 18,},
	{27, 10, 8, 2,},
	{15, 10, 25, 20,},
	{23, 29, 8, 30,},
	{8, 7, 27, 7,},
	{8, 7, 12, 7,},
	{1, 7, 1, 7,},
	{28, 17, 19, 3,},
	{8, 10, 11, 12,},
	{7, 28, 7, 23,},
	{7, 28, 17, 16,},
	{7, 14, 25, 24,},
	{7, 10, 18, 1,},
	{14, 28, 20, 21,},
	{8, 18, 18, 16,},
	{8, 10, 10, 28,},
	{1, 5, 7, 2,},
	{7, 12, 8, 18,},
	{30, 11, 11, 12,},
	{10, 10, 10, 18,},
	{14, 7, 30, 16,},
	{29, 7, 7, 27,},
	{26, 7, 6, 5,},
	{7, 29, 23, 14,},
	{7, 29, 28, 12,},
	{7, 29, 23, 28,},
	{7, 10, 6, 5,},
}

rainbow = {8, 24, 25, 9, 10, 26, 11, 27, 17, 12, 28, 29, 23, 14, 30,}

custColors = {}

--[[BOOKMARK:Instructions]]
-- Corresponds with types below
instructions =
{
	{
		"X: Hide overlay",
		"Z: View options",
		"Up/Down: Scroll",
	},
	{
		"X: Hide overlay",
		"Z: Return to main menu",
		"Up/Down: Scroll",
		"Left/Right: Change value",
	},
	{
		"X: Hide overlay",
		"Z: Return to main menu",
		"Up/Down: Scroll",
		"Left/Right: Toggle off/on",
	},
	{
		"X: Hide overlay",
		"Z: Return to main menu",
		"Up/Down: Scroll",
		"Left/Right: Change value",
	},
	{
		"X: Hide overlay",
		"Z: Select option",
		"Up/Down: Scroll",
	},
	{
		"X: Hide overlay",
		"Z: Select option",
		"Up/Down: Scroll",
	},
}

--[[BOOKMARK:Settings]]
-- Types:
--		1: Main menu
--		2: Sub-menu, can't go deeper
--		3: Number item
--		4: Toggle item
--		5: Custom color item
--		6: Button
--		7: Go back
--function initializeSettings()
	settings =
	{
		countOptions =
		{
			text = "Point Count", tLength = 11 * 5, desc = "Number of points displayed on the screen", type = 2,
			choices =
			{
				{text = "Vertical Count:", desc = "Number of points displayed vertically", tLength = 75, value = 3, increment = 1, minVal = 1, maxVal = 999, type = 3,},
				{text = "Horizontal Count:", desc = "Number of points displayed horizontally", tLength = 85, value = 5, increment = 1, minVal = 1, maxVal = 999, type = 3,},
			},
		},
		colorOptions = 
		{
			text = "Draw and Color", desc = "Color options and alternative options for point drawing", tLength = 13 * 5 + 3, type = 2,
			choices =
			{
				{text = "Palette:", desc = "Pre-made color palette", tLength = 41, value = 5, increment = 1, minVal = 1, maxVal = #palettes, type = 3,},
				{text = "Color Variation:", desc = "Repeat colors from color palette this many times", tLength = 79, value = 6, increment = 1, minVal = 0, maxVal = 999, type = 3,},
				{text = "Filled Points:", desc = "When enabled, points will be solid. When disabled, points will be outlined", tLength = 15 * 5, value = 1, increment = 1, minVal = 0, maxVal = 1, type = 4,},
				{text = "Redraw:", desc = "For outlined points, draw the point this many times in succession", tLength = 8 * 5, value = 0, increment = 1, minVal = 0, maxVal = 10, type = 3,},
				{text = "Redraw Factor:", desc = "For redrawn points, draw subsequent points this much smaller", tLength = 16 * 5, value = 1, increment = 1, minVal = 1, maxVal = 999, type = 3,},
			},
		},
		sizeOptions =
		{
			text = "Size and Position", desc = "Display offset, zoom, point size and growth rate", tLength = 16 * 5 + 2, type = 2,
			choices =
			{
				{text = "Dot Size:", desc = "", tLength = 46, value = 24, increment = 1, minVal = 4, maxVal = 999, type = 3,},
				{text = "Size Variation:", desc = "", tLength = 74, value = 20, increment = 1, minVal = 0, maxVal = 999, type = 3,},
				{text = "Size Change Speed:", desc = "", tLength = 91, value = 10, increment = 1, minVal = 0, maxVal = 999, type = 3,},
				{text = "Overall Y Offset:", desc = "", tLength = 85, value = 0, increment = 1, minVal = -999, maxVal = 999, type = 3,},
				{text = "Overall X Offset:", desc = "", tLength = 85, value = 0, increment = 1, minVal = -999, maxVal = 999, type = 3,},
				{text = "Zoom:", desc = "", tLength = 6 * 5, value = 100, increment = 1,  minVal = 1, maxVal = 999, type = 3,},
			},
		},
		oscillationOptions =
		{
			text = "Oscillation Options", desc = "Speed at which points oscillate on sine wave", tLength = 19 * 5, type = 2,
			choices =
			{
				{text = "X Speed:", desc = "X sine oscillation speed", tLength = 42, value = 15, increment = 1, minVal = 1, maxVal = 999, type = 3,},
				{text = "Y Speed:", desc = "Y sine oscillation speed", tLength = 42, value = 20, increment = 1, minVal = 1, maxVal = 999, type = 3,},
				{text = "X Offset:", desc = "Starting position for X sine oscillation", tLength = 47, value = 0, increment = 1, minVal = 0, maxVal = 100, type = 3,},
				{text = "Y Offset:", desc = "Starting position for Y sine oscillation", tLength = 47, value = 0, increment = 1, minVal = 0, maxVal = 100, type = 3,},
			},
		},
		customColors =
		{
			text = "Custom Colors", desc = "Enable and specify custom colors", tLength = 14 * 5, type = 2,
			choices =
			{
				{text = "Color 4:", desc = "Fourth custom color; also initial background color", tLength = 8 * 5 + 1, value = 1, increment = 1, minVal = 0, maxVal = 31, type = 5,},
				{text = "Color 3:", desc = "Third custom color", tLength = 8 * 5 + 1, value = 16, increment = 1, minVal = 0, maxVal = 31, type = 5,},
				{text = "Color 2:", desc = "Second custom color", tLength = 8 * 5 + 1, value = 12, increment = 1, minVal = 0, maxVal = 31, type = 5,},
				{text = "Color 1:", desc = "First custom color", tLength = 8 * 5 + 1, value = 28, increment = 1, minVal = 0, maxVal = 31, type = 5,},
				{text = "Enabled:", desc = "Enable custom colors (overrides Palette setting)", tLength = 8 * 5 + 1, value = 0, increment = 1, minVal = 0, maxVal = 1, type = 4,},
			}
		},
		generalOptions =
		{
			text = "General Options", desc = "Editor options and other general options", tLength = 15 * 5 + 3, type = 2,
			choices =
			{
				{text = "Reset animation on setting change", desc = "Reset the animation when values are changed (this only affects the editor)", tLength = 33 * 5 + 3, value = 1, increment = 1, minVal = 0, maxVal = 1, type = 4,},
				{text = "Clear screen after drawing points", desc = "Don't use paint-like effect, instead clearing screen before drawing points again", tLength = 31 * 5 + 4, value = 0, increment = 1, minVal = 0, maxVal = 1, type = 4,},
			}
		},
		generateOptions =
		{
			text = "Generate", desc = "", tLength = 9 * 5, type = 2,
			choices =
			{
				{text = "Go back", desc = "", tLength = 8 * 5, type = 7,},
				{text = "Save config file", desc = "", tLength = 16 * 5 + 2, type = 6,},
				{text = "Load config file", desc = "", tLength = 16 * 5 + 2, type = 6,},
				{text = "Save as background", desc = "", tLength = 19 * 5, type = 6,},
				{text = "Save as screensaver", desc = "", tLength = 20 * 5, type = 6,},
				{text = "Save to appdata", desc = "", tLength = 16 * 5 + 2, type = 6,},
			}
		}
	}

	settings.mainOptions =
	{
		text = "Options", tLength = 0, desc = "Options to configure the pattern, as well as save and load data", tLength = 7 * 4, type = 1,
		choices =
		{
			settings.generateOptions,
			settings.generalOptions,
			settings.customColors,
			settings.colorOptions,
			settings.countOptions,
			settings.sizeOptions,
			settings.oscillationOptions,
		},
	}
	
	options = settings.mainOptions
--end

z = 
{
{x = 1, y = 1,},
{x = -1, y = 1,},
{x = 1, y = -1,},
{x = -1, y = -1,},
}
	
menu = false
selection = #options
selectorXMod = 0

function setTextLength(_settings)
	for _k, _v in pairs(_settings) do
		for _i = 1, #_settings[_k].choices do
			_choice = _settings[_k].choices[_i]
			_settings[_k].choices[_i].tLength = print(_choice.text, 0, 0)
		end
	end
	
	return _settings
end
:: sfx/
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA5LTI1IDE4OjE4OjMwIixtb2RpZmllZD0iMjAyNS0x
MC0yMyAxODozNjoyMSJdXQ==
:: showMenu_log.txt
--[[pod_format="raw",created="2025-10-03 21:29:55",modified="2025-10-03 21:49:45",revision=5]]
ERROR: Could not find 'tLength' variable for Generate
:: snd/
:: snd/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA5LTI1IDE4OjE4OjI2Iixtb2RpZmllZD0iMjAyNS0x
MC0yMyAxODozNjoyMSJdXQ==
:: snd/sfx.lua
--[[pod_format="raw",created="2025-09-25 18:35:09",modified="2025-09-26 21:10:00",revision=1]]

:: [eoc]
